from compiler import Circuit, circuit_to_matrix, are_equal_ignore_phase

import unittest
import numpy as np

def optimize_and_compare(circuit):
    matrix1 = circuit_to_matrix(circuit)
    circuit.optimize()
    matrix2 = circuit_to_matrix(circuit)
    return are_equal_ignore_phase(matrix1, matrix2)
    
class TestOptimization(unittest.TestCase):
    def test_optimize_as_expected(self):
        """This circuit is equivalent to the identity function and all gates should be optimized away."""
        circuit = Circuit(5)
        circuit.ry(2, 5)
        circuit.ry(2, -5)
        circuit.rz(2, 5)
        circuit.rz(2, -5)
        circuit.crx(0, 2, 5)
        circuit.crx(0, 2, -5)
        circuit.rz(0, 0)
        circuit.x(4)
        circuit.rz(0, np.pi/3)
        circuit.x(4)
        circuit.rz(0, np.pi/3)
        circuit.x(4)
        circuit.rz(0, np.pi/3)
        circuit.x(4)
        circuit.x(4)
        circuit.rz(0, np.pi/3)
        circuit.x(4)
        circuit.rz(0, np.pi/3)
        circuit.x(4)
        circuit.rz(0, np.pi/3)
        circuit.x(4)
        circuit.y(0)
        circuit.y(0)
        circuit.y(0)
        circuit.y(0)
        circuit.id(1)
        circuit.id(2)
        circuit.id(3)
        circuit.cx(0, 1)
        circuit.x(4)
        circuit.cx(0, 1)
        circuit.x(4)
        circuit.rx(1, 5)
        circuit.ssx(2, [], 5)
        circuit.ssx(2, [], -5)
        circuit.rx(1, -5)
        circuit.optimize()
        self.assertEqual(circuit.gates, [])

    def test_optimize_large_circuit(self):
        """Check if the circuit is equivalent after the optimization"""
        circuit = Circuit(5)
        circuit.u(1, np.pi, 4, 2.45, 0)
        circuit.rx(0, 0)
        circuit.rx(0, 1)
        circuit.rx(0, np.pi)
        circuit.rx(0, 3.7234)
        circuit.y(0)
        circuit.y(0)
        circuit.y(0)
        circuit.y(0)
        circuit.y(0)
        circuit.rz(2, np.pi/5)
        circuit.ry(1, np.pi/7)
        circuit.rx(0, 2)
        circuit.s(4)
        circuit.sdg(3)
        circuit.t(1)
        circuit.tdg(2)
        circuit.sx(1)
        circuit.sxdg(0)
        circuit.id(3)
        circuit.cx(0, 1)
        circuit.x(4)
        circuit.cx(0, 1)
        circuit.x(4)
        circuit.cx(0, 1)
        circuit.cu(3, 4, np.pi, 4, 2.45, 0)
        circuit.crx(3, 4, np.pi)
        circuit.swap(2, 4)
        circuit.ccx(1, 2, 3)
        self.assertTrue(optimize_and_compare(circuit))
